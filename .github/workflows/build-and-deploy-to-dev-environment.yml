name: Build and Deploy to Dev Environment

on:
  push:
    branches:
      - 'main'
      - 'master'
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ main, master ]

permissions:
  contents: read
  packages: read

jobs:
  build:
    name: Build gradle project
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      jar_file_name: ${{ steps.get-jar-name.outputs.jar_file_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Configure Gradle for GitHub Packages
        run: |
          mkdir -p ~/.gradle
          echo "gpr.user=${{ github.actor }}" >> ~/.gradle/gradle.properties
          echo "gpr.token=${{ secrets.GITHUB_TOKEN }}" >> ~/.gradle/gradle.properties

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2

      - name: Assemble the project
        run: ./gradlew assemble

      - name: Run the tests
        run: ./gradlew test

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Get the JAR file name
        id: get-jar-name
        run: |
          JAR_FILE_NAME=$(./gradlew -q printBootJarName)
          echo "jar_file_name=$JAR_FILE_NAME" >> $GITHUB_OUTPUT

      - name: Get the JAR file path
        id: get-jar-path
        run: |
          JAR_FILE_PATH=$(./gradlew -q printBootJarInfo | jq -r '.jarFileAbsolutePath')
          echo $JAR_FILE_PATH
          echo "jar_file_name=$JAR_FILE_PATH" >> $GITHUB_OUTPUT

      - name: Copy JAR file and Dockerfile
        run: |
          mkdir -p staging && cp $(find . -type f -path "*/build/*" -name $(./gradlew -q printBootJarName) ! -name "*plain*.jar") staging
          cp ci/Dockerfile staging          

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: staging

  publish:
    name: Publish to Docker Hub
    runs-on: ubuntu-latest
    needs: [ build ]
    outputs:
      docker-image: ${{ steps.meta.outputs.tags }}
    env:
      CONTAINER_REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
      CONTAINER_REGISTRY_USERNAME: ${{ vars.DOCKER_HUB_USERNAME }}
      CONTAINER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      NAMESPACE: ${{ vars.DOCKER_HUB_USERNAME }}
      IMAGE_NAME: ${{ vars.DOCKER_HUB_REPOSITORY }}
    steps:
      - name: Validate required variables
        run: |
          if [ -z "${{ vars.DOCKER_HUB_REPOSITORY }}" ]; then
            echo "Error: DOCKER_HUB_REPOSITORY is not set."
            exit 1
          fi
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: package
      - name: Login to container repository
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ env.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ env.CONTAINER_REGISTRY_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.CONTAINER_REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.version }}
            type=semver,pattern={{major}},value=${{ inputs.version }}
            type=ref,event=branch,suffix=-{{ sha }}
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
      - name: Build and push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            JAR_FILE=${{ needs.build.outputs.jar_file_name }}
  deploy:
    name: Deploy to Kubernetes
    needs:
      - build
      - publish
    runs-on: ubuntu-latest
    env:
      NAMESPACE: commerce
      REPLICAS: 2
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set the Kubernetes context
        uses: azure/k8s-set-context@v4
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_URL }}
          k8s-secret: ${{ secrets.KUBERNETES_SECRET }}
      - name: Set the Kubernetes context
        uses: azure/k8s-set-context@v4
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_URL }}
          k8s-secret: ${{ secrets.KUBERNETES_SECRET }}
      - name: Deploy to the Kubernetes cluster
        uses: azure/k8s-deploy@v5
        if: github.event_name != 'pull_request'
        with:
          strategy: basic
          action: deploy
          namespace: ${{ env.NAMESPACE }}
          manifests: |
            manifests/deployment.yaml
            manifests/service.yaml
            manifests/ingress.yaml
          images: |
            ${{ needs.publish.outputs.docker-image }}

